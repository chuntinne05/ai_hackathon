'use client';

import { useState } from 'react';
import MessageStatus from '@/components/MessageStatus';
import CopyButton from '@/components/CopyButton';
import MarkdownMessage from '@/components/MarkdownMessage';

type MessageStatusType = 'sending' | 'sent' | 'error';

type Props = {
  text: string;
  role: 'user' | 'bot';
  timestamp?: Date;
  status?: MessageStatusType; // Ch·ªâ cho user messages
  onRetry?: () => void; // Callback khi click retry (n·∫øu error)
};

export default function ChatMessage({ text, role, timestamp, status, onRetry }: Props) {
  const isUser = role === 'user';
  const [isHovered, setIsHovered] = useState(false);

  // Check xem message c√≥ ch·ª©a markdown kh√¥ng
  const hasMarkdown = text.includes('**') || text.includes('`') || text.includes('#') || text.includes('[');

  // Format th·ªùi gian
  const formatTime = (date: Date) => {
    return date.toLocaleTimeString('vi-VN', { 
      hour: '2-digit', 
      minute: '2-digit' 
    });
  };

  return (
    <div 
      className={`flex items-start gap-2 ${isUser ? 'flex-row-reverse' : 'flex-row'}`}
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
    >
      {/* Avatar */}
      <div className="flex-shrink-0">
        {isUser ? (
          <div className="flex h-8 w-8 items-center justify-center rounded-full bg-blue-500 text-white text-sm font-semibold">
            U
          </div>
        ) : (
          <div className="flex h-8 w-8 items-center justify-center rounded-full bg-gradient-to-br from-purple-500 to-pink-500 text-white text-sm">
            ü§ñ
          </div>
        )}
      </div>

      {/* Message content */}
      <div className={`flex flex-col ${isUser ? 'items-end' : 'items-start'} max-w-[75%]`}>
        {/* Message bubble */}
        <div
          className={`group relative rounded-lg p-3 ${
            isUser
              ? 'bg-blue-500 text-white rounded-br-none' 
              : 'bg-gray-100 text-gray-900 rounded-bl-none'
          } ${status === 'error' ? 'border-2 border-red-500' : ''}`}
          onClick={status === 'error' ? onRetry : undefined}
          style={{ cursor: status === 'error' ? 'pointer' : 'default' }}
        >
          {/* Message text - v·ªõi ho·∫∑c kh√¥ng markdown */}
          {hasMarkdown && !isUser ? (
            <div className={isUser ? 'text-white' : 'text-gray-900'}>
              <MarkdownMessage content={text} />
            </div>
          ) : (
            <p className="text-sm whitespace-pre-wrap break-words">{text}</p>
          )}

          {/* Copy button - ch·ªâ show khi hover v√†o bot message */}
          {!isUser && isHovered && (
            <div className="absolute -right-8 top-1">
              <CopyButton text={text} />
            </div>
          )}
        </div>

        {/* Timestamp v√† Status */}
        <div className={`flex items-center gap-2 mt-1 ${isUser ? 'flex-row-reverse' : 'flex-row'}`}>
          {timestamp && (
            <span className="text-xs text-gray-500">
              {formatTime(timestamp)}
            </span>
          )}
          
          {/* Message status - ch·ªâ cho user messages */}
          {isUser && status && (
            <MessageStatus status={status} />
          )}
          
          {/* Error retry hint */}
          {status === 'error' && (
            <span className="text-xs text-red-500">
              Click ƒë·ªÉ th·ª≠ l·∫°i
            </span>
          )}
        </div>
      </div>
    </div>
  );
}

/*
GI·∫¢I TH√çCH C√ÅC FEATURES M·ªöI:

1. MESSAGE STATUS:
   - Prop 'status' optional cho user messages
   - Hi·ªÉn th·ªã icon sending/sent/error
   - Error messages c√≥ red border ƒë·ªÉ n·ªïi b·∫≠t

2. COPY BUTTON:
   - Ch·ªâ show cho bot messages (kh√¥ng c·∫ßn copy tin c·ªßa m√¨nh)
   - Hi·ªán khi hover (isHovered state)
   - Absolute position b√™n c·∫°nh message bubble

3. MARKDOWN RENDERING:
   - Check hasMarkdown: C√≥ ch·ª©a **, `, #, [ kh√¥ng?
   - N·∫øu c√≥ + l√† bot message ‚Üí d√πng MarkdownMessage
   - User messages: lu√¥n plain text (ƒë·ªÉ tr√°nh user inject markdown)

4. RETRY ON ERROR:
   - Error messages c√≥ cursor pointer
   - onClick g·ªçi onRetry callback
   - Show hint "Click ƒë·ªÉ th·ª≠ l·∫°i"

5. IMPROVED STYLING:
   - max-w-[75%]: Message kh√¥ng qu√° r·ªông
   - Gradient avatar cho bot (ƒë·∫πp h∆°n)
   - group class: D√πng cho group-hover effects sau n√†y

6. HOVER STATE:
   - Track onMouseEnter/onMouseLeave
   - Show/hide copy button d·ª±a v√†o state n√†y
   - Smooth UX kh√¥ng l√†m r·ªëi message

7. ACCESSIBILITY:
   - Cursor pointer cho error messages
   - Clear visual feedback (red border + text)
   - Title attributes tr√™n icons

USAGE EXAMPLE:

// User message ƒëang g·ª≠i
<ChatMessage 
  role="user" 
  text="Hello"
  timestamp={new Date()}
  status="sending"
/>

// Bot message v·ªõi markdown
<ChatMessage 
  role="bot" 
  text="Here's code:\n```python\nprint('hi')\n```"
  timestamp={new Date()}
/>

// User message b·ªã l·ªói + retry
<ChatMessage 
  role="user" 
  text="Failed message"
  timestamp={new Date()}
  status="error"
  onRetry={() => handleRetry(messageId)}
/>
*/